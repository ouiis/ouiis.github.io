<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 4.2.1">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">


<link rel="stylesheet" href="/lib/font-awesome/css/all.min.css">
  
  <link rel="stylesheet" href="/lib/animate-css/animate.min.css">

<script class="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"ouiis.github.io","root":"/","scheme":"Muse","version":"8.0.0-rc.4","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":false,"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"algolia":{"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"localsearch":{"enable":false,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}}};
  </script>

  <meta name="description" content="在小型專案裡，由於架構並不複雜，在管理上較不容易出現問題，但隨著專案的規模的成長，或者團隊人數的增加，如何讓程式碼的架構一目瞭然，方便自己或其他開發者維護專案，成為一個必須思考的課題。 SMACSS 是 Scalable and Modular Architecture for CSS 的縮寫，由 Jonathan Snook 提出的 CSS 設計方法，目的在於使 CSS 的結構具有延展性以及模組">
<meta property="og:type" content="article">
<meta property="og:title" content="CSS 設計模式 - SMACSS">
<meta property="og:url" content="https://ouiis.github.io/posts/20200527/3030697487">
<meta property="og:site_name" content="前端의刃 | J&#39;s Notes">
<meta property="og:description" content="在小型專案裡，由於架構並不複雜，在管理上較不容易出現問題，但隨著專案的規模的成長，或者團隊人數的增加，如何讓程式碼的架構一目瞭然，方便自己或其他開發者維護專案，成為一個必須思考的課題。 SMACSS 是 Scalable and Modular Architecture for CSS 的縮寫，由 Jonathan Snook 提出的 CSS 設計方法，目的在於使 CSS 的結構具有延展性以及模組">
<meta property="og:locale" content="zh_TW">
<meta property="article:published_time" content="2020-05-26T16:00:00.000Z">
<meta property="article:modified_time" content="2020-12-03T07:33:13.002Z">
<meta property="article:author" content="ouiis">
<meta property="article:tag" content="css">
<meta property="article:tag" content="smacss">
<meta name="twitter:card" content="summary">

<link rel="canonical" href="https://ouiis.github.io/posts/20200527/3030697487">


<script class="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-TW'
  };
</script>

  <title>CSS 設計模式 - SMACSS | 前端의刃 | J's Notes</title>
  
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-T6KJHHEXHV"></script>
    <script>
      if (CONFIG.hostname === location.hostname) {
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'G-T6KJHHEXHV');
      }
    </script>






  <noscript>
  <style>
  body { margin-top: 2rem; }

  .use-motion .menu-item,
  .use-motion .sidebar,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header {
    visibility: visible;
  }

  .use-motion .header,
  .use-motion .site-brand-container .toggle,
  .use-motion .footer { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle,
  .use-motion .custom-logo-image {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line {
    transform: scaleX(1);
  }

  .search-pop-overlay, .sidebar-nav { display: none; }
  .sidebar-panel { display: block; }
  </style>
</noscript>

<link rel="alternate" href="/atom.xml" title="前端의刃 | J's Notes" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage">
  <div class="container use-motion">
    <div class="headband"></div>

    <main class="main">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader">
        <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切換導航欄">
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <h1 class="site-title">前端의刃 | J's Notes</h1>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">#Front-end</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>







</div>
          
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line toggle-line-first"></span>
    <span class="toggle-line toggle-line-middle"></span>
    <span class="toggle-line toggle-line-last"></span>
  </div>

  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目錄
        </li>
        <li class="sidebar-nav-overview">
          本站概要
        </li>
      </ul>

      <!--noindex-->
      <section class="post-toc-wrap sidebar-panel">
          <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#分類-CSS"><span class="nav-number">1.</span> <span class="nav-text">分類 CSS</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Base-基本"><span class="nav-number">2.</span> <span class="nav-text">Base 基本</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Layout-佈局"><span class="nav-number">3.</span> <span class="nav-text">Layout 佈局</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Module-模組"><span class="nav-number">4.</span> <span class="nav-text">Module 模組</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#Subclassing-Modules-子模組"><span class="nav-number">4.1.</span> <span class="nav-text">Subclassing Modules 子模組</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#State-狀態"><span class="nav-number">5.</span> <span class="nav-text">State 狀態</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Theme"><span class="nav-number">6.</span> <span class="nav-text">Theme</span></a></li></ol></div>
      </section>
      <!--/noindex-->

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">ouiis</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives">
          <span class="site-state-item-count">15</span>
          <span class="site-state-item-name">文章</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
        <span class="site-state-item-count">5</span>
        <span class="site-state-item-name">分類</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
        <span class="site-state-item-count">18</span>
        <span class="site-state-item-name">標籤</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <a href="https://github.com/ouiis" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;ouiis" rel="noopener" target="_blank"><i class="fab fa-github fa-fw"></i></a>
      </span>
  </div>



      </section>
    </div>
  </aside>
  <div id="sidebar-dimmer"></div>


      </header>

      
  <div class="back-to-top">
    <i class="fa fa-arrow-up"></i>
    <span>0%</span>
  </div>

<noscript>
  <div id="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


      <div class="main-inner">
        

        <div class="content post posts-expand">
          

    
  
  
  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-TW">
    <link itemprop="mainEntityOfPage" href="https://ouiis.github.io/posts/20200527/3030697487">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="ouiis">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="前端의刃 | J's Notes">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          CSS 設計模式 - SMACSS
        </h1>

        <div class="post-meta">
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-calendar"></i>
              </span>
              <span class="post-meta-item-text">發表於</span>

              <time title="創建時間：2020-05-27 00:00:00" itemprop="dateCreated datePublished" datetime="2020-05-27T00:00:00+08:00">2020-05-27</time>
            </span>
            <span class="post-meta-item">
              <span class="post-meta-item-icon">
                <i class="far fa-folder"></i>
              </span>
              <span class="post-meta-item-text">分類於</span>
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/CSS/" itemprop="url" rel="index"><span itemprop="name">CSS</span></a>
                </span>
            </span>

          

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">

      
        <p>在小型專案裡，由於架構並不複雜，在管理上較不容易出現問題，但隨著專案的規模的成長，或者團隊人數的增加，如何讓程式碼的架構一目瞭然，方便自己或其他開發者維護專案，成為一個必須思考的課題。</p>
<p><em>SMACSS</em> 是 <em>Scalable and Modular Architecture for CSS</em> 的縮寫，由 <em>Jonathan Snook</em> 提出的 CSS 設計方法，目的在於使 CSS 的結構具有<strong>延展性</strong>以及<strong>模組化</strong>。</p>
<blockquote>
<p><em><a href="http://smacss.com" target="_blank" rel="noopener">SMACSS 文件</a></em></p>
</blockquote>
<h2 id="分類-CSS"><a href="#分類-CSS" class="headerlink" title="分類 CSS"></a>分類 CSS</h2><p>將 CSS 分門別類是 <em>SMACSS</em> 的核心重點，共有以下五種類別：</p>
<ol>
<li>Base</li>
<li>Layout</li>
<li>Module</li>
<li>State</li>
<li>Theme</li>
</ol>
<a id="more"></a>

<h2 id="Base-基本"><a href="#Base-基本" class="headerlink" title="Base 基本"></a>Base 基本</h2><p><strong>Base</strong> 是在做全站的預設樣式（例如：CSS Reset），不使用 class 或 ID 選擇器，也不應使用到 <code>!important</code>。</p>
<p>必須使用<strong>標籤選擇器（element selectors）</strong>，也可以使用：</p>
<ul>
<li><strong>屬性選擇器（attribute selectors）</strong></li>
<li><strong>虛擬類別（pseudo-class selectors）</strong></li>
<li><strong>後代選擇器（child selectors）</strong></li>
<li><strong>相鄰選擇器（sibling selectors）</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">form</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#039</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#03F</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建議指定 <code>body</code> 的背景色，因為使用者可能會自訂網頁的背景色。</p>
<h2 id="Layout-佈局"><a href="#Layout-佈局" class="headerlink" title="Layout 佈局"></a>Layout 佈局</h2><p><strong>Layout</strong> 將網頁分成不同的區塊（例：header、footer 等），一個 Layout 區塊可能會包含一個或數個 Module（例：導覽列的連結、登入表單等）。</p>
<p>通常 layout 會使用單一選擇器（ID 或 class 選擇器），有時版型可能需要響應不同的情況，此時可以在 layout 的外層增加 class，並以前綴 <code>l-</code> 來命名，用以區分與 module 或 state 的不同。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#article</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.l-fixed</span> <span class="selector-id">#article</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.l-fixed</span> <span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Module-模組"><a href="#Module-模組" class="headerlink" title="Module 模組"></a>Module 模組</h2><p><strong>Module</strong> 是頁面中可以重複使用的部分（例：側邊欄、產品列表等），位於 layout  元件或其他 module 內，每個 module 都應該是獨立的元件，可隨意移動其位置至頁面其他地方。</p>
<p>應使用 class 選擇器，避免使用 ID 和標籤選擇器，若使用標籤選擇器，日後若增加其他標籤容易造成衝突。</p>
<h3 id="Subclassing-Modules-子模組"><a href="#Subclassing-Modules-子模組" class="headerlink" title="Subclassing Modules 子模組"></a>Subclassing Modules 子模組</h3><p>當頁面不同地方使用到相同模組，且模組的樣式有些不同時（例：寬度改變），可能會透過選取外層元素加以區別。</p>
<p><em>位於 <code>#sidebar</code> 的 <code>.pod input[type=text]</code> 寬度為 <code>100%</code>：</em></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pod</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-class">.pod</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>但這樣的使用方法，可能會造成之後需要再增加選擇器，甚至使用 <code>!important</code> 來新增樣式。</p>
<p><em>新增了一個樣式與 <code>.pod</code> 相同的元件，但無論位置在哪，寬度都固定在 <code>180px</code>：</em></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pod-callout</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-class">.pod-callout</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,</span><br><span class="line"><span class="selector-class">.pod-callout</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，應<strong>避免以位置管理樣式</strong>，為模組寫好基本樣式，並新增子模組（sub-classing）管理不同的樣式。</p>
<p><em>新增子模組 <code>.pod-constrained</code>、<code>.pod-callout</code>，其內的 <code>input[type=text]</code> 寬度為 <code>100%</code>、<code>180px</code>：</em></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pod</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.pod</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-constrained</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-callout</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-callout</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="State-狀態"><a href="#State-狀態" class="headerlink" title="State 狀態"></a>State 狀態</h2><p><strong>State</strong> 是用來管理 layout 或 module 當前狀態的樣式。例如：accordion（摺疊選單）是摺疊或展開狀態、文字代表的是成功或失敗訊息…等，通常與 layout 或 module 元素是同一個階層。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"is-collapsed"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg is-error"</span>&gt;</span></span><br><span class="line">          There is an error!</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"searchbox"</span> <span class="attr">class</span>=<span class="string">"is-hidden"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"searchbox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>state 和子模組都是在修改基本樣式，兩者不同的地方在於：</p>
<ol>
<li>state 可以修改 layout 和 module 的樣式。</li>
<li>state 會搭配 JavaScript 使用。</li>
</ol>
<p>子模組在網頁渲染時就應用在元素上，但 state 會隨著使用者的操作有所變化。</p>
<p>建議在 state 使用 <code>!important</code>，用來覆蓋複雜的樣式結構，且 state 通常只會有一個，不容易造成衝突。</p>
<h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p><strong>Theme</strong> 和 state 相似，都是在管理 layout 或 module 的樣式，大部分的專案不太使用，可應用在多國語言的字型管理。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* in module-name.css 定義基本樣式 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* in theme.css 定義主題顏色 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>

    
    
    

      <footer class="post-footer">
          <div class="post-tags">
              <a href="/tags/css/" rel="tag"># css</a>
              <a href="/tags/smacss/" rel="tag"># smacss</a>
          </div>

        


        
    <div class="post-nav">
      <div class="post-nav-item">
    <a href="/posts/20200523/2766055839" rel="prev" title="CSS 設計模式 - BEM">
      <i class="fa fa-chevron-left"></i> CSS 設計模式 - BEM
    </a></div>
      <div class="post-nav-item">
    <a href="/posts/20200528/3863821502" rel="next" title="CSS 設計模式 - OOCSS">
      CSS 設計模式 - OOCSS <i class="fa fa-chevron-right"></i>
    </a></div>
    </div>
      </footer>
    
  </article>
  
  
  



        </div>
        

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      let activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      let commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

      </div>
    </main>

    <footer class="footer">
      <div class="footer-inner">
        

        

<div class="copyright">
  
  &copy; 
  <span itemprop="copyrightYear">2020</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">ouiis</span>
</div>

        








      </div>
    </footer>
  </div>

  
  <script src="/lib/anime.min.js"></script>

<script src="/js/utils.js"></script>

<script src="/js/motion.js"></script>


<script src="/js/schemes/muse.js"></script>


<script src="/js/next-boot.js"></script>


  















  

  

</body>
</html>
