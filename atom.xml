<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OUIIS&#39;s NOTES</title>
  
  <subtitle>前端の刃</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ouiis.github.io/"/>
  <updated>2020-10-30T06:30:17.970Z</updated>
  <id>https://ouiis.github.io/</id>
  
  <author>
    <name>ouiis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 處理字串的方法</title>
    <link href="https://ouiis.github.io/2020/10/30/JavaScript-%E8%99%95%E7%90%86%E5%AD%97%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://ouiis.github.io/2020/10/30/JavaScript-%E8%99%95%E7%90%86%E5%AD%97%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-10-30T05:33:24.000Z</published>
    <updated>2020-10-30T06:30:17.970Z</updated>
    
    <content type="html"><![CDATA[<p>如何將一段字串的順序倒轉？例如： <code>hello</code> =&gt; <code>olleh</code>，除了字串方法也會使用到陣列方法 <code>reverse()</code> 和 <code>join()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br></pre></td></tr></table></figure><ol><li>將字串轉成陣列</li><li>倒轉陣列</li><li>最後將陣列轉回字串</li></ol><a id="more"></a><h1 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h1><ul><li>將一個字串分割為由字串組成的陣列，以指定的界定字串（delimiter string）或正規運算式為分隔進行切割。</li><li>可以帶入第二個參數限制字數。</li></ul><p>沒有指定界定字串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'I am the best.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strA = str.split();</span><br><span class="line"><span class="built_in">console</span>.log(strA);</span><br><span class="line"><span class="comment">// ['I am the best.']</span></span><br></pre></td></tr></table></figure><p>空字串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strB = str.split(<span class="string">''</span>);</span><br><span class="line"><span class="built_in">console</span>.log(strB);</span><br><span class="line"><span class="comment">//  ["I", " ", "a", "m", " ", "t", "h", "e", " ", "b", "e", "s", "t", "."]</span></span><br></pre></td></tr></table></figure><p>空格字串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strC = str.split(<span class="string">' '</span>);</span><br><span class="line"><span class="built_in">console</span>.log(strC);</span><br><span class="line"><span class="comment">// ["I", "am", "the", "best."]</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">String.prototype.split() - MDN web docs</a></p></blockquote><h1 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h1><p>參數帶入<strong>索引（index）</strong>，可以從字串擷取出指定位置上的字元。</p><h1 id="indexOf-、lastIndexOf"><a href="#indexOf-、lastIndexOf" class="headerlink" title="indexOf()、lastIndexOf()"></a>indexOf()、lastIndexOf()</h1><ul><li>在字串中搜尋指定的字元或子字串，<code>lastIndexOf()</code> 方法是反向搜尋。</li><li>陣列也有相同的方法，根據指定的值搜尋元素。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何將一段字串的順序倒轉？例如： &lt;code&gt;hello&lt;/code&gt; =&amp;gt; &lt;code&gt;olleh&lt;/code&gt;，除了字串方法也會使用到陣列方法 &lt;code&gt;reverse()&lt;/code&gt; 和 &lt;code&gt;join()&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str.split(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;).reverse().join(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;將字串轉成陣列&lt;/li&gt;
&lt;li&gt;倒轉陣列&lt;/li&gt;
&lt;li&gt;最後將陣列轉回字串&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://ouiis.github.io/categories/JavaScript/"/>
    
    
      <category term="string" scheme="https://ouiis.github.io/tags/string/"/>
    
      <category term="javascript" scheme="https://ouiis.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js Slot</title>
    <link href="https://ouiis.github.io/2020/09/01/Vue-js-Slot/"/>
    <id>https://ouiis.github.io/2020/09/01/Vue-js-Slot/</id>
    <published>2020-08-31T16:00:00.000Z</published>
    <updated>2020-10-30T06:31:35.712Z</updated>
    
    <content type="html"><![CDATA[<p>在 2.6.0 中新增了 <code>v-slot</code> 指令，取代了 <code>slot</code> 和 <code>slot-scope</code>。</p><h1 id="Slot-Content"><a href="#Slot-Content" class="headerlink" title="Slot Content"></a>Slot Content</h1><ul><li>在元件 <code>template</code> 裡面新增 <code>&lt;slot&gt;</code> 元素 ，便可在使用該元件時任意新增<strong>文字、HTML 或其他元件等內容</strong>在插槽的位置。</li><li>若 <code>template</code> 裡沒有 <code>&lt;slot&gt;</code> 元素，則在裡面新增的內容都會被忽略。</li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:href</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"nav-link"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">"/profile"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Compilation-Scope"><a href="#Compilation-Scope" class="headerlink" title="Compilation Scope"></a>Compilation Scope</h1><p>父元件裡的內容都是在父級作用域中編譯的；子元件裡的所有內容都是在子作用域中編譯的。</p><h1 id="Fallback-Content"><a href="#Fallback-Content" class="headerlink" title="Fallback Content"></a>Fallback Content</h1><p>可是先定義插槽的預設內容。</p><h1 id="Named-Slots-具名插槽"><a href="#Named-Slots-具名插槽" class="headerlink" title="Named Slots 具名插槽"></a>Named Slots 具名插槽</h1><p><code>&lt;slot&gt;</code> 可以使用 <code>name</code> 屬性定義額外的插槽。沒有指定名稱的插槽預設名稱為 <code>default</code>。</p><p>在 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> directive，並透過參數傳入名稱。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 2.6.0 中新增了 &lt;code&gt;v-slot&lt;/code&gt; 指令，取代了 &lt;code&gt;slot&lt;/code&gt; 和 &lt;code&gt;slot-scope&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;Slot-Content&quot;&gt;&lt;a href=&quot;#Slot-Content&quot; class=&quot;headerlink&quot; title=&quot;Slot Content&quot;&gt;&lt;/a&gt;Slot Content&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在元件 &lt;code&gt;template&lt;/code&gt; 裡面新增 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素 ，便可在使用該元件時任意新增&lt;strong&gt;文字、HTML 或其他元件等內容&lt;/strong&gt;在插槽的位置。&lt;/li&gt;
&lt;li&gt;若 &lt;code&gt;template&lt;/code&gt; 裡沒有 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素，則在裡面新增的內容都會被忽略。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Vue.js" scheme="https://ouiis.github.io/categories/Vue-js/"/>
    
    
      <category term="slot" scheme="https://ouiis.github.io/tags/slot/"/>
    
      <category term="vue.js" scheme="https://ouiis.github.io/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>CSS 文字單位（px、em、rem…）</title>
    <link href="https://ouiis.github.io/2020/06/08/CSS%20%E6%96%87%E5%AD%97%E5%96%AE%E4%BD%8D%EF%BC%88px%E3%80%81em%E3%80%81rem%E2%80%A6%EF%BC%89/"/>
    <id>https://ouiis.github.io/2020/06/08/CSS%20%E6%96%87%E5%AD%97%E5%96%AE%E4%BD%8D%EF%BC%88px%E3%80%81em%E3%80%81rem%E2%80%A6%EF%BC%89/</id>
    <published>2020-06-07T16:00:00.000Z</published>
    <updated>2020-07-13T08:42:10.494Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 的文字單位分為<strong>絕對單位</strong>與<strong>相對單位</strong>。絕對單位是直接指定該元素的大小；相對單位則是會視裝置大小、根元素（html）或父元素的大小而定。</p><h2 id="絕對單位"><a href="#絕對單位" class="headerlink" title="絕對單位"></a>絕對單位</h2><ul><li><p><strong>px</strong>：螢幕顯示的單位（pixel），組成螢幕圖像的最小單位。是最常使用的單位，瀏覽器預設的字體大小為 16px。</p></li><li><p><strong>pt</strong>：很少使用的單位，也是印刷的單位（point），另一種是 iOS 所定義的 pt。</p><a id="more"></a><h2 id="相對單位"><a href="#相對單位" class="headerlink" title="相對單位"></a>相對單位</h2></li><li><p><strong>em</strong>：相對父元素的單位，使用在 em 的數值為<strong>父元素大小的倍數</strong>。若父元素為 30px，<code>0.8em = 30px * 0.8 = 24px</code>。</p></li><li><p><strong>rem</strong>：相對 HTML 的單位，使用在 rem 的數值為 <strong>HTML 大小的倍數</strong>（預設為 16px）。若 HTML 為預設值 16px，<code>0.8rem = 16px * 0.8  = 12.8px</code>。</p></li><li><p><strong>%</strong>：與 em 類似，相對父元素的單位，當子元素使用百分比做為單位時，大小為<strong>父元素的百分比</strong>。若父元素為 30px，<code>80% = 30px * 0.8 = 24px</code>。</p></li></ul><blockquote><p>參考資料：</p><ul><li><a href="https://www.oxxostudio.tw/articles/201809/css-font-size.html" target="_blank" rel="noopener">一次搞懂 CSS 字體單位：px、em、rem 和 %</a></li><li><a href="https://wcc723.github.io/design/2018/10/27/fonts-family/" target="_blank" rel="noopener">鐵人賽：網頁設計 - 文字大小、行高與空間上的關係</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 的文字單位分為&lt;strong&gt;絕對單位&lt;/strong&gt;與&lt;strong&gt;相對單位&lt;/strong&gt;。絕對單位是直接指定該元素的大小；相對單位則是會視裝置大小、根元素（html）或父元素的大小而定。&lt;/p&gt;
&lt;h2 id=&quot;絕對單位&quot;&gt;&lt;a href=&quot;#絕對單位&quot; class=&quot;headerlink&quot; title=&quot;絕對單位&quot;&gt;&lt;/a&gt;絕對單位&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;px&lt;/strong&gt;：螢幕顯示的單位（pixel），組成螢幕圖像的最小單位。是最常使用的單位，瀏覽器預設的字體大小為 16px。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pt&lt;/strong&gt;：很少使用的單位，也是印刷的單位（point），另一種是 iOS 所定義的 pt。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://ouiis.github.io/categories/CSS/"/>
    
    
      <category term="font" scheme="https://ouiis.github.io/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>CSS 設計模式 - OOCSS</title>
    <link href="https://ouiis.github.io/2020/05/28/CSS-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-OOCSS/"/>
    <id>https://ouiis.github.io/2020/05/28/CSS-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-OOCSS/</id>
    <published>2020-05-27T16:00:00.000Z</published>
    <updated>2020-07-13T08:07:32.527Z</updated>
    
    <content type="html"><![CDATA[<p><em>OOCSS</em> 是 <em>Object Oriented CSS</em> 的縮寫，由 <em>Nicole Sullivan</em> 所提出的 CSS 設計模式，而這裡指的物件是可以在網站上重複使用的 CSS 樣式。</p><p><em>OOCSS</em> 有兩個大原則：</p><ol><li>Separate Structure and Skin（結構與樣式的分離）</li><li>Separate Container and Content（容器與內容的分離）</li></ol><h2 id="結構與樣式的分離"><a href="#結構與樣式的分離" class="headerlink" title="結構與樣式的分離"></a>結構與樣式的分離</h2><p><strong>結構</strong>指的是無法直接用肉眼看出來的部分，例如元素被指定的大小和位置。</p><ul><li>Height</li><li>Width</li><li>Margins</li><li>Padding</li><li>Overflow</li></ul><p><strong>樣式</strong>指的是元素可見的部分，例如：</p><ul><li>Colors</li><li>Fonts</li><li>Shadows</li><li>Gradients<a id="more"></a><h2 id="容器與內容的分離"><a href="#容器與內容的分離" class="headerlink" title="容器與內容的分離"></a>容器與內容的分離</h2></li></ul><p><strong>內容</strong>指的是位於其他元素之內的文字段落、圖片等，容器與內容的分離代表<strong>無論內容位在何處，都不會影響其樣式</strong>，而容器也可以以結構來表示。</p><blockquote><p>參考：</p><ul><li><a href="https://github.com/stubbornella/oocss/wiki" target="_blank" rel="noreferrer noopener">OOCSS - GitHub</a></li><li><a href="https://www.keycdn.com/blog/oocss" target="_blank" rel="noreferrer noopener">OOCSS - The Future of Writing CSS</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;OOCSS&lt;/em&gt; 是 &lt;em&gt;Object Oriented CSS&lt;/em&gt; 的縮寫，由 &lt;em&gt;Nicole Sullivan&lt;/em&gt; 所提出的 CSS 設計模式，而這裡指的物件是可以在網站上重複使用的 CSS 樣式。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;OOCSS&lt;/em&gt; 有兩個大原則：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Separate Structure and Skin（結構與樣式的分離）&lt;/li&gt;
&lt;li&gt;Separate Container and Content（容器與內容的分離）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;結構與樣式的分離&quot;&gt;&lt;a href=&quot;#結構與樣式的分離&quot; class=&quot;headerlink&quot; title=&quot;結構與樣式的分離&quot;&gt;&lt;/a&gt;結構與樣式的分離&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;結構&lt;/strong&gt;指的是無法直接用肉眼看出來的部分，例如元素被指定的大小和位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Height&lt;/li&gt;
&lt;li&gt;Width&lt;/li&gt;
&lt;li&gt;Margins&lt;/li&gt;
&lt;li&gt;Padding&lt;/li&gt;
&lt;li&gt;Overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;樣式&lt;/strong&gt;指的是元素可見的部分，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Colors&lt;/li&gt;
&lt;li&gt;Fonts&lt;/li&gt;
&lt;li&gt;Shadows&lt;/li&gt;
&lt;li&gt;Gradients
    
    </summary>
    
    
      <category term="CSS" scheme="https://ouiis.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="https://ouiis.github.io/tags/css/"/>
    
      <category term="oocss" scheme="https://ouiis.github.io/tags/oocss/"/>
    
  </entry>
  
  <entry>
    <title>CSS 設計模式 - SMACSS</title>
    <link href="https://ouiis.github.io/2020/05/27/CSS-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-SMACSS/"/>
    <id>https://ouiis.github.io/2020/05/27/CSS-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-SMACSS/</id>
    <published>2020-05-26T16:00:00.000Z</published>
    <updated>2020-10-30T04:37:33.788Z</updated>
    
    <content type="html"><![CDATA[<p>在小型專案裡，由於架構並不複雜，在管理上較不容易出現問題，但隨著專案的規模的成長，或者團隊人數的增加，如何讓程式碼的架構一目瞭然，方便自己或其他開發者維護專案，成為一個必須思考的課題。</p><p><em>SMACSS</em> 是 <em>Scalable and Modular Architecture for CSS</em> 的縮寫，由 <em>Jonathan Snook</em> 提出的 CSS 設計方法，目的在於使 CSS 的結構具有<strong>延展性</strong>以及<strong>模組化</strong>。</p><blockquote><p><a href="http://smacss.com" target="_blank" rel="noopener">SMACSS 文件</a></p></blockquote><h2 id="分類-CSS"><a href="#分類-CSS" class="headerlink" title="分類 CSS"></a>分類 CSS</h2><p>將 CSS 分門別類是 <em>SMACSS</em> 的核心重點，共有以下五種類別：</p><ol><li>Base</li><li>Layout</li><li>Module</li><li>State</li><li>Theme<a id="more"></a></li></ol><h2 id="Base-基本"><a href="#Base-基本" class="headerlink" title="Base 基本"></a>Base 基本</h2><p><strong>Base</strong> 是在做全站的預設樣式（例如：CSS Reset），不使用 class 或 ID 選擇器，也不應使用到 <code>!important</code>。</p><p>必須使用<strong>標籤選擇器（element selectors）</strong>，也可以使用：</p><ul><li><strong>屬性選擇器（attribute selectors）</strong></li><li><strong>虛擬類別（pseudo-class selectors）</strong></li><li><strong>後代選擇器（child selectors）</strong></li><li><strong>相鄰選擇器（sibling selectors）</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">form</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#039</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#03F</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建議指定 <code>body</code> 的背景色，因為使用者可能會自訂網頁的背景色。</p><h2 id="Layout-佈局"><a href="#Layout-佈局" class="headerlink" title="Layout 佈局"></a>Layout 佈局</h2><p><strong>Layout</strong> 將網頁分成不同的區塊（例：header、footer 等），一個 Layout 區塊可能會包含一個或數個 Module（例：導覽列的連結、登入表單等）。</p><p>通常 layout 會使用單一選擇器（ID 或 class 選擇器），有時版型可能需要響應不同的情況，此時可以在 layout 的外層增加 class，並以前綴 <code>l-</code> 來命名，用以區分與 module 或 state 的不同。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#article</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.l-fixed</span> <span class="selector-id">#article</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.l-fixed</span> <span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Module-模組"><a href="#Module-模組" class="headerlink" title="Module 模組"></a>Module 模組</h2><p><strong>Module</strong> 是頁面中可以重複使用的部分（例：側邊欄、產品列表等），位於 layout  元件或其他 module 內，每個 module 都應該是獨立的元件，可隨意移動其位置至頁面其他地方。</p><p>應使用 class 選擇器，避免使用 ID 和標籤選擇器，若使用標籤選擇器，日後若增加其他標籤容易造成衝突。</p><h3 id="Subclassing-Modules-子模組"><a href="#Subclassing-Modules-子模組" class="headerlink" title="Subclassing Modules 子模組"></a>Subclassing Modules 子模組</h3><p>當頁面不同地方使用到相同模組，且模組的樣式有些不同時（例：寬度改變），可能會透過選取外層元素加以區別。</p><p><em>位於 <code>#sidebar</code> 的 <code>.pod input[type=text]</code> 寬度為 <code>100%</code>：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pod</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-class">.pod</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但這樣的使用方法，可能會造成之後需要再增加選擇器，甚至使用 <code>!important</code> 來新增樣式。</p><p><em>新增了一個樣式與 <code>.pod</code> 相同的元件，但無論位置在哪，寬度都固定在 <code>180px</code>：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pod-callout</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-class">.pod-callout</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,</span><br><span class="line"><span class="selector-class">.pod-callout</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，應<strong>避免以位置管理樣式</strong>，為模組寫好基本樣式，並新增子模組（sub-classing）管理不同的樣式。</p><p><em>新增子模組 <code>.pod-constrained</code>、<code>.pod-callout</code>，其內的 <code>input[type=text]</code> 寬度為 <code>100%</code>、<code>180px</code>：</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pod</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.pod</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-constrained</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-callout</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pod-callout</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">180px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="State-狀態"><a href="#State-狀態" class="headerlink" title="State 狀態"></a>State 狀態</h2><p><strong>State</strong> 是用來管理 layout 或 module 當前狀態的樣式。例如：accordion（摺疊選單）是摺疊或展開狀態、文字代表的是成功或失敗訊息…等，通常與 layout 或 module 元素是同一個階層。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span> <span class="attr">class</span>=<span class="string">"is-collapsed"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"msg is-error"</span>&gt;</span></span><br><span class="line">          There is an error!</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"searchbox"</span> <span class="attr">class</span>=<span class="string">"is-hidden"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">id</span>=<span class="string">"searchbox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>state 和子模組都是在修改基本樣式，兩者不同的地方在於：</p><ol><li>state 可以修改 layout 和 module 的樣式。</li><li>state 會搭配 JavaScript 使用。</li></ol><p>子模組在網頁渲染時就應用在元素上，但 state 會隨著使用者的操作有所變化。</p><p>建議在 state 使用 <code>!important</code>，用來覆蓋複雜的樣式結構，且 state 通常只會有一個，不容易造成衝突。</p><h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p><strong>Theme</strong> 和 state 相似，都是在管理 layout 或 module 的樣式，大部分的專案不太使用，可應用在多國語言的字型管理。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* in module-name.css 定義基本樣式 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* in theme.css 定義主題顏色 */</span></span><br><span class="line"><span class="selector-class">.mod</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在小型專案裡，由於架構並不複雜，在管理上較不容易出現問題，但隨著專案的規模的成長，或者團隊人數的增加，如何讓程式碼的架構一目瞭然，方便自己或其他開發者維護專案，成為一個必須思考的課題。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SMACSS&lt;/em&gt; 是 &lt;em&gt;Scalable and Modular Architecture for CSS&lt;/em&gt; 的縮寫，由 &lt;em&gt;Jonathan Snook&lt;/em&gt; 提出的 CSS 設計方法，目的在於使 CSS 的結構具有&lt;strong&gt;延展性&lt;/strong&gt;以及&lt;strong&gt;模組化&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://smacss.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SMACSS 文件&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分類-CSS&quot;&gt;&lt;a href=&quot;#分類-CSS&quot; class=&quot;headerlink&quot; title=&quot;分類 CSS&quot;&gt;&lt;/a&gt;分類 CSS&lt;/h2&gt;&lt;p&gt;將 CSS 分門別類是 &lt;em&gt;SMACSS&lt;/em&gt; 的核心重點，共有以下五種類別：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Base&lt;/li&gt;
&lt;li&gt;Layout&lt;/li&gt;
&lt;li&gt;Module&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Theme
    
    </summary>
    
    
      <category term="CSS" scheme="https://ouiis.github.io/categories/CSS/"/>
    
    
      <category term="css" scheme="https://ouiis.github.io/tags/css/"/>
    
      <category term="smacss" scheme="https://ouiis.github.io/tags/smacss/"/>
    
  </entry>
  
  <entry>
    <title>CSS 設計模式 - BEM</title>
    <link href="https://ouiis.github.io/2020/05/23/CSS-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-BEM/"/>
    <id>https://ouiis.github.io/2020/05/23/CSS-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-BEM/</id>
    <published>2020-05-22T16:00:00.000Z</published>
    <updated>2020-07-13T08:27:49.838Z</updated>
    
    <content type="html"><![CDATA[<p><em>BEM (Block Element Modifier)</em> 是由 <em>Yandex</em> 所提出的 CSS 設計模式，一種 CSS class 命名方式，如名稱所示，命名是由「區塊、元素、修飾符」所組成。</p><blockquote><p><a href="https://en.bem.info/" target="_blank" rel="noopener">BEM 文件</a></p></blockquote><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p><strong>Block</strong> 是頁面上每一個獨立的元件，以<strong>區塊功能來命名 class，不以區塊外觀命名</strong>。</p><ul><li>block 可獨立在頁面上任何地方，因此每個 block 都不應被位置限制住，不要在 block 寫 <code>margin</code>、<code>position</code> 等影響外部環境樣式。</li><li>使用 BEM 設計模式時不應使用標籤、ID 選擇器。</li><li>可以和其他 block 巢狀包覆。</li></ul><p><img src="https://images.bloggi.co/ecf81943.png" alt=""></p><a id="more"></a><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p><strong>Element</strong> 是 block 的一部份，block 後加上兩個下底線 <code>__</code> 與 element 區隔，且不能單獨使用，和 block 皆以功能命名。</p><ul><li>可以和其他 element 巢狀包覆。</li><li>每個 element 都是 block 的一部份，不能單獨使用，因此元素之間<strong>不能有階層關係</strong>，如：<del><code>block__elem1__elem2</code></del>。</li></ul><p><img src="https://images.bloggi.co/05b63f23.png" alt=""></p><h2 id="Modifier"><a href="#Modifier" class="headerlink" title="Modifier"></a>Modifier</h2><p><strong>Modifier</strong> 是描述 block 和 element 的狀態或外觀，原始的 BEM 是使用一個下底線 <code>_</code> 與 block 和 element 區隔。</p><blockquote><p>在後來 <em>Nicolas Gallagher</em> 提出的版本中，modifier 是使用兩條連字號 <code>--</code> 連接 block 和 element。</p></blockquote><blockquote><p><a href="https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" rel="noopener">MindBEMding – getting your head ’round BEM syntax</a></p></blockquote><p><img src="https://images.bloggi.co/36ca1e28.png" alt=""></p><h2 id="BEM-的命名規則"><a href="#BEM-的命名規則" class="headerlink" title="BEM 的命名規則"></a>BEM 的命名規則</h2><ul><li>名字皆以小寫字母組成。</li><li>單字之間以連字號 <code>-</code> 連接。</li><li>block 的名稱為其 element、modifier 建立命名空間，與其他 block 相同名稱的 element、modifier 互不相影響。</li><li>block 與 element 之間以兩個下底線 <code>__</code> 連接。</li><li>block、element 與 modifier 以一個下底線 <code>_</code> 連接。</li><li>modifier 與 modifier  之間以一個下底線 <code>_</code> 連接。</li><li>布林修飾符的值與名稱不相關。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;BEM (Block Element Modifier)&lt;/em&gt; 是由 &lt;em&gt;Yandex&lt;/em&gt; 所提出的 CSS 設計模式，一種 CSS class 命名方式，如名稱所示，命名是由「區塊、元素、修飾符」所組成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://en.bem.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BEM 文件&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Block&quot;&gt;&lt;a href=&quot;#Block&quot; class=&quot;headerlink&quot; title=&quot;Block&quot;&gt;&lt;/a&gt;Block&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Block&lt;/strong&gt; 是頁面上每一個獨立的元件，以&lt;strong&gt;區塊功能來命名 class，不以區塊外觀命名&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block 可獨立在頁面上任何地方，因此每個 block 都不應被位置限制住，不要在 block 寫 &lt;code&gt;margin&lt;/code&gt;、&lt;code&gt;position&lt;/code&gt; 等影響外部環境樣式。&lt;/li&gt;
&lt;li&gt;使用 BEM 設計模式時不應使用標籤、ID 選擇器。&lt;/li&gt;
&lt;li&gt;可以和其他 block 巢狀包覆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://images.bloggi.co/ecf81943.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://ouiis.github.io/categories/CSS/"/>
    
    
      <category term="bem" scheme="https://ouiis.github.io/tags/bem/"/>
    
      <category term="css" scheme="https://ouiis.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>git reset 還原到之前的版本</title>
    <link href="https://ouiis.github.io/2020/02/14/git-reset-%E9%82%84%E5%8E%9F%E5%88%B0%E4%B9%8B%E5%89%8D%E7%9A%84%E7%89%88%E6%9C%AC/"/>
    <id>https://ouiis.github.io/2020/02/14/git-reset-%E9%82%84%E5%8E%9F%E5%88%B0%E4%B9%8B%E5%89%8D%E7%9A%84%E7%89%88%E6%9C%AC/</id>
    <published>2020-02-13T16:00:00.000Z</published>
    <updated>2020-07-13T08:07:44.250Z</updated>
    
    <content type="html"><![CDATA[<p><em>狀況：想將檔案還原到之前的 commit。</em></p><p>回到前一次的 commit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^</span><br><span class="line">$ git reset HEAD~</span><br></pre></td></tr></table></figure><p>當 <code>HEAD</code> 與 <code>master</code> 都指向同一個 commit 時，可以寫成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset master^</span><br><span class="line">$ git reset master~</span><br></pre></td></tr></table></figure><p>回到前三次的 commit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^^^</span><br><span class="line">$ git reset HEAD^3</span><br><span class="line">$ git reset HEAD~3</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="git-reset-的參數"><a href="#git-reset-的參數" class="headerlink" title="git reset 的參數"></a>git reset 的參數</h2><h3 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h3><p><code>--mixed</code> 是預設的參數，將檔案的狀態退到工作目錄。</p><h3 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h3><p><code>--soft</code> 將檔案的狀態退到索引區。</p><h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><p><code>--hard</code> 將檔案退回到未修改之前。</p><h2 id="操作注意"><a href="#操作注意" class="headerlink" title="操作注意"></a>操作注意</h2><p>盡量不要將已推到遠端數據庫的 commit reset 再推上去。</p><blockquote><p>參考：</p><ol><li><a href="https://w3c.hexschool.com/git/dba36bc5" target="_blank" rel="noopener">git reset - 還原版本</a></li><li><a href="https://gitbook.tw/chapters/using-git/reset-commit.html" target="_blank" rel="noopener">【狀況題】剛才的 Commit 後悔了，想要拆掉重做…</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;狀況：想將檔案還原到之前的 commit。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;回到前一次的 commit：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git reset HEAD^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git reset HEAD~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;當 &lt;code&gt;HEAD&lt;/code&gt; 與 &lt;code&gt;master&lt;/code&gt; 都指向同一個 commit 時，可以寫成：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git reset master^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git reset master~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;回到前三次的 commit：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git reset HEAD^^^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git reset HEAD^3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git reset HEAD~3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://ouiis.github.io/categories/Git/"/>
    
    
      <category term="git" scheme="https://ouiis.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git 基礎操作</title>
    <link href="https://ouiis.github.io/2020/02/13/Git-%E5%9F%BA%E7%A4%8E%E6%93%8D%E4%BD%9C/"/>
    <id>https://ouiis.github.io/2020/02/13/Git-%E5%9F%BA%E7%A4%8E%E6%93%8D%E4%BD%9C/</id>
    <published>2020-02-12T16:00:00.000Z</published>
    <updated>2020-07-13T08:07:40.856Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是一個「分散式版本控制軟體」，簡單說就是用於版本控制的工具，透過 Git 將每次的修改儲存成一個版本，如此可以方便了解各版本之間的差異。</p><h2 id="Git-安裝與設定"><a href="#Git-安裝與設定" class="headerlink" title="Git 安裝與設定"></a>Git 安裝與設定</h2><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><ol><li>前往 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git 官網</a> 找到下載 Git 按鈕進行下載。</li><li>下載成功後跟著步驟即可完成安裝。</li><li>安裝完成後在終端機輸入 <code>$ git version</code> 查看版本資訊。<a id="more"></a><h3 id="設定識別資料"><a href="#設定識別資料" class="headerlink" title="設定識別資料"></a>設定識別資料</h3></li></ol><p>Git 在每次版本發佈時都會紀錄哪位開發者發佈，因此需設定好自己的識別資料。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;名字&quot;</span><br><span class="line">$ git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><p>設定完成後，輸入 <code>$ git config --list</code> 查看設定檔，在設定檔直接輸入 <code>q</code> 則可退出查看。</p><h2 id="終端機基本指令"><a href="#終端機基本指令" class="headerlink" title="終端機基本指令"></a>終端機基本指令</h2><ul><li><code>$ cd 路徑</code> 前往指定路徑</li><li><code>$ cd ..</code> 前往目前路徑的上一層</li><li><code>$ ls</code> 展開目錄</li><li><code>$ mkdir &lt;資料夾名稱&gt;</code> 新增資料夾</li><li><code>$ touch &lt;檔案名稱&gt;</code> 新增檔案</li></ul><h2 id="在工作目錄新增本地數據庫"><a href="#在工作目錄新增本地數據庫" class="headerlink" title="在工作目錄新增本地數據庫"></a>在工作目錄新增本地數據庫</h2><p><code>$ git init</code></p><p>透過終端機進入要進行版本控制的資料夾，輸入 <code>$ git init</code>，這個指令會在資料夾根目錄產生一個 <code>.git</code> 的隱藏資料夾，所有版控項目都會利用這個資料夾監控。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd 資料夾路徑</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><h2 id="將檔案新增至索引"><a href="#將檔案新增至索引" class="headerlink" title="將檔案新增至索引"></a>將檔案新增至索引</h2><p>輸入 <code>$ git add &lt;檔案名稱&gt;</code> 指令將檔案加入到索引，若不指定檔案直接輸入 <code>$ git add .</code> 可將全部的檔案加入到索引。</p><h2 id="將索引提交至數據庫"><a href="#將索引提交至數據庫" class="headerlink" title="將索引提交至數據庫"></a>將索引提交至數據庫</h2><p>輸入 <code>$ git commit -m &quot;更新訊息&quot;</code> 就可以發佈一個新版本。</p><h2 id="查詢檔案狀態"><a href="#查詢檔案狀態" class="headerlink" title="查詢檔案狀態"></a>查詢檔案狀態</h2><p>輸入 <code>$ git status</code> 可查看目前工作目錄的狀態。</p><h2 id="查詢歷史紀錄"><a href="#查詢歷史紀錄" class="headerlink" title="查詢歷史紀錄"></a>查詢歷史紀錄</h2><p>輸入 <code>$ git log</code> 可查看已發佈的版本紀錄，直接輸入 <code>q</code> 則可退出查看，歷史紀錄會以反向時間排序，最新的提交紀錄會最先被列出來。</p><blockquote><p>參考：</p><ol><li><a href="https://git-scm.com/book/zh-tw/v2/Git-%E5%9F%BA%E7%A4%8E-%E6%AA%A2%E8%A6%96%E6%8F%90%E4%BA%A4%E7%9A%84%E6%AD%B7%E5%8F%B2%E8%A8%98%E9%8C%84" target="_blank" rel="noopener">Git 基礎 - 檢視提交的歷史記錄</a></li><li><a href="https://gitbook.tw/chapters/using-git/log.html" target="_blank" rel="noopener">檢視紀錄 - 為你自己學 Git</a></li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 預設</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 將每一筆提交顯示成單獨一行</span><br><span class="line">$ git log --pretty&#x3D;oneline</span><br><span class="line">$ git log --oneline</span><br></pre></td></tr></table></figure><h2 id="關於-HEAD"><a href="#關於-HEAD" class="headerlink" title="關於 HEAD"></a>關於 HEAD</h2><p><code>HEAD</code> 是目前所在位置的指標，指向「目前所在的分支」或是「目前所在的 commit 版本」。<strong>預設情況下</strong>，<code>master</code> 是預設分支名稱，串連數個 commit 紀錄，<code>HEAD</code> 會跟著 <code>master</code> 前進，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 是一個「分散式版本控制軟體」，簡單說就是用於版本控制的工具，透過 Git 將每次的修改儲存成一個版本，如此可以方便了解各版本之間的差異。&lt;/p&gt;
&lt;h2 id=&quot;Git-安裝與設定&quot;&gt;&lt;a href=&quot;#Git-安裝與設定&quot; class=&quot;headerlink&quot; title=&quot;Git 安裝與設定&quot;&gt;&lt;/a&gt;Git 安裝與設定&lt;/h2&gt;&lt;h3 id=&quot;安裝&quot;&gt;&lt;a href=&quot;#安裝&quot; class=&quot;headerlink&quot; title=&quot;安裝&quot;&gt;&lt;/a&gt;安裝&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;前往 &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git 官網&lt;/a&gt; 找到下載 Git 按鈕進行下載。&lt;/li&gt;
&lt;li&gt;下載成功後跟著步驟即可完成安裝。&lt;/li&gt;
&lt;li&gt;安裝完成後在終端機輸入 &lt;code&gt;$ git version&lt;/code&gt; 查看版本資訊。
    
    </summary>
    
    
      <category term="Git" scheme="https://ouiis.github.io/categories/Git/"/>
    
    
      <category term="git" scheme="https://ouiis.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 語意標籤</title>
    <link href="https://ouiis.github.io/2020/02/07/HTML5-%E8%AA%9E%E6%84%8F%E6%A8%99%E7%B1%A4/"/>
    <id>https://ouiis.github.io/2020/02/07/HTML5-%E8%AA%9E%E6%84%8F%E6%A8%99%E7%B1%A4/</id>
    <published>2020-02-06T16:00:00.000Z</published>
    <updated>2020-07-13T08:12:58.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="語意化元素"><a href="#語意化元素" class="headerlink" title="語意化元素"></a>語意化元素</h2><p>以往在佈局 HTML 頁面時，經常使用不具語意的 <code>&lt;div&gt;</code> 進行排版。於是 HTML5 新增了幾個語意化元素，使開發者能夠更具體的描述 HTML 內容、加強網頁的結構，並讓搜尋引擎更加了解網頁內容。</p><p>以 <code>&lt;div&gt;</code> 進行佈局時，會以 class 命名各區塊，透過 class 替元素指定樣式，對於瀏覽器或搜尋引擎， class 的命名是不具有任何意思的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="article"><a href="#article" class="headerlink" title="article"></a>article</h2><blockquote><p><a href="https://html.spec.whatwg.org/multipage/sections.html#the-article-element" target="_blank" rel="noopener">The article element</a></p></blockquote><p><code>article</code> 是一個完整且獨立組成的部分，例如一篇論壇文章，或一篇報紙文章。<code>article</code> 元素為巢狀時，原則上內層的 <code>article</code> 是與外層 <code>article</code> 相關的內容，例如部落格文章的讀者留言。</p><h2 id="section"><a href="#section" class="headerlink" title="section"></a>section</h2><blockquote><p><a href="https://html.spec.whatwg.org/multipage/sections.html#the-section-element" target="_blank" rel="noopener">The section element</a></p></blockquote><p><code>section</code> 是一個具有主題性的區塊，它通常包含一個標題。</p><p>例如：</p><ul><li><code>section</code> 可作為一個章節、文章裡的段落。</li><li>一個網站的首頁包含數個 <code>section</code>，其中有網站介紹、最新消息和聯絡資訊等。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>網站介紹<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>最新消息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>聯絡資訊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;語意化元素&quot;&gt;&lt;a href=&quot;#語意化元素&quot; class=&quot;headerlink&quot; title=&quot;語意化元素&quot;&gt;&lt;/a&gt;語意化元素&lt;/h2&gt;&lt;p&gt;以往在佈局 HTML 頁面時，經常使用不具語意的 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 進行排版。於是 HTML5 新增了幾個語意化元素，使開發者能夠更具體的描述 HTML 內容、加強網頁的結構，並讓搜尋引擎更加了解網頁內容。&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 進行佈局時，會以 class 命名各區塊，透過 class 替元素指定樣式，對於瀏覽器或搜尋引擎， class 的命名是不具有任何意思的。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;header&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;navbar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://ouiis.github.io/categories/HTML/"/>
    
    
      <category term="html5" scheme="https://ouiis.github.io/tags/html5/"/>
    
  </entry>
  
</feed>
